===== front-end/app.js =====
// front-end/app.js
import express           from 'express';
import session           from 'express-session';
import cookieParser      from 'cookie-parser'; // Add cookie parser import
import path              from 'path';
import { fileURLToPath } from 'url';
import morgan            from 'morgan';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const app       = express();

// ─────────────────────────────────────────────────────────────────────────────
// 0)  API base-URL resolution
// ─────────────────────────────────────────────────────────────────────────────
const API_BASE        =
  process.env.GO_API_URL       ||
  process.env.ORCHESTRATOR_URL ||
  'http://orchestrator:8080';

const GOOGLE_AUTH_URL =
  process.env.GOOGLE_AUTH_URL ||
  'http://google_auth_service:8086';    // Use Docker service name

// ─────────────────────────────────────────────────────────────────────────────
// 1)  3rd-party middleware
// ─────────────────────────────────────────────────────────────────────────────
app.use(morgan('dev'));
app.use(cookieParser()); // Add cookie parser middleware

// ─────────────────────────────────────────────────────────────────────────────
// 2)  Static assets
// ─────────────────────────────────────────────────────────────────────────────
app.use(express.static(path.join(__dirname, 'public')));

// ─────────────────────────────────────────────────────────────────────────────
// 3)  Body-parsers
// ─────────────────────────────────────────────────────────────────────────────
app.use(express.urlencoded({ extended: false }));
app.use(express.json());

// ─────────────────────────────────────────────────────────────────────────────
// 4)  Sessions & locals
// ─────────────────────────────────────────────────────────────────────────────
app.use(session({
  secret           : 'change-this-secret',
  resave           : false,
  saveUninitialized: true,
}));
app.use((req, res, next) => {
  res.locals.user       = req.session.user || null;
  res.locals.currentUrl = req.originalUrl;
  res.locals.API_BASE   = API_BASE;
  next();
});

// ─────────────────────────────────────────────────────────────────────────────
// 5)  EJS templating
// ─────────────────────────────────────────────────────────────────────────────
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// ─────────────────────────────────────────────────────────────────────────────
// 6)  GOOGLE OAUTH PROXY
//    Forward front-end `/auth/google/...` to your google_auth_service.
// ─────────────────────────────────────────────────────────────────────────────
app.get('/auth/google/login', (req, res) => {
  const role = req.query.role || 'institution_representative';
  // For Docker, we need to redirect to the external URL
  const externalGoogleAuthUrl = process.env.GOOGLE_AUTH_EXTERNAL_URL || 'http://localhost:8086';
  res.redirect(`${externalGoogleAuthUrl}/auth/google/login?role=${role}`);
});

// Handle successful Google login callback
app.get('/auth/google/callback', (req, res) => {
  // This route is called when Google Auth Service redirects back
  // The JWT should already be in a cookie set by Google Auth Service
  
  // Check if we have a JWT cookie
  const token = req.cookies.token;
  if (token) {
    // Set session based on the JWT token
    // For now, we'll default to institution_representative for Google users
    req.session.user = {
      username: 'google_user',
      role: 'institution_representative'
    };
    res.redirect('/institution?google_login=success');
  } else {
    res.redirect('/login?error=google_login_failed');
  }
});

// Add middleware to check for Google login and set session
app.use((req, res, next) => {
  // Check for JWT cookie and google_login parameter
  if (req.query.google_login === 'success' && req.cookies && req.cookies.token && !req.session.user) {
    // This is a Google login callback, validate the JWT and set session
    try {
      // For now, we'll trust the cookie and set default Google user session
      req.session.user = {
        username: 'google_user',
        role: 'institution_representative'
      };
    } catch (error) {
      console.error('Error processing Google login:', error);
    }
  }
  next();
});

// ─────────────────────────────────────────────────────────────────────────────
// 7)  Auth helper
// ─────────────────────────────────────────────────────────────────────────────
function auth(role) {
  return (req, res, next) => {
    if (!req.session.user) return res.redirect('/login');
    if (role) {
      if (role === 'institution') {
        if (!['institution','representative','institution_representative']
              .includes(req.session.user.role)) {
          return res.redirect(`/${req.session.user.role}`);
        }
      } else if (req.session.user.role !== role) {
        return res.redirect(`/${req.session.user.role}`);
      }
    }
    next();
  };
}

// ─────────────────────────────────────────────────────────────────────────────
// 8)  Dummy users (dev only)
// ─────────────────────────────────────────────────────────────────────────────
const users = { alice: 'student', bob: 'instructor', iris: 'institution' };

// ─────────────────────────────────────────────────────────────────────────────
// 9)  UI routes
// ─────────────────────────────────────────────────────────────────────────────

// Home
app.get('/', (req, res) => {
  if (!req.session.user) return res.redirect('/login');
  res.redirect(`/${req.session.user.role}`);
});

// Signup / Login
app.get('/signup', (_, res) =>
  res.render('signup', { title: 'Sign Up', user: null })
);

app.get('/login', (_, res) =>
  res.render('login', { title: 'Log in', error: null, user: null })
);

// CLASSIC form POST – creates session
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  try {
    const response = await fetch(`${API_BASE}/user/login`, {
      method : 'POST',
      headers: { 'Content-Type': 'application/json' },
      body   : JSON.stringify({ username, password })
    });
    const data = await response.json();

    if (!response.ok || !data.role) {
      return res.render('login', {
        title : 'Log in',
        error : data.message || 'Invalid credentials',
        user  : null
      });
    }

    req.session.user = { username, role: data.role };

    if (['institution_representative','representative']
        .includes(data.role))      return res.redirect('/institution');
    else if (data.role === 'instructor') return res.redirect('/instructor');
    else if (data.role === 'student')    return res.redirect('/student');
    else                                 return res.redirect('/');
  } catch (err) {
    return res.render('login', {
      title : 'Log in',
      error : 'Login failed',
      user  : null
    });
  }
});

app.post('/api/session', (req, res) => {
  const { username, role } = req.body;
  if (!username || !role) {
    return res.status(400).json({ error: 'username and role required' });
  }
  req.session.user = { username, role };
  res.sendStatus(200);
});

app.get('/logout', (req, res) =>
  req.session.destroy(() => res.redirect('/login'))
);

// Student UI
app.get('/student',            auth('student'), (req,res)=>res.render('student/dashboard',    { user:req.session.user, title:'Dashboard' }));
app.get('/student/statistics', auth('student'), (req,res)=>res.render('student/statistics',   { user:req.session.user, title:'Statistics' }));
app.get('/student/my-courses', auth('student'), (req,res)=>res.render('student/myCourses',    { user:req.session.user, title:'My Courses' }));
app.get('/student/request',    auth('student'), (req,res)=>res.render('student/reviewRequest',{ user:req.session.user, title:'Review Request' }));
app.get('/student/status',     auth('student'), (req,res)=>res.render('student/reviewStatus', { user:req.session.user, title:'Review Status' }));
app.get('/student/personal',   auth('student'), (req,res)=>res.render('student/personal',     { user:req.session.user, title:'Personal Grades' }));

// Instructor UI
app.get('/instructor',              auth('instructor'), (req,res)=>res.render('instructor/dashboard', { user:req.session.user, title:'Dashboard' }));
app.get('/instructor/post-initial', auth('instructor'), (req,res)=>res.render('instructor/postInitial',{ user:req.session.user, title:'Post Initial' }));
app.get('/instructor/post-final',   auth('instructor'), (req,res)=>res.render('instructor/postFinal',  { user:req.session.user, title:'Post Final' }));
app.get('/instructor/review-list',  auth('instructor'), (req,res)=>res.render('instructor/reviewList', { user:req.session.user, title:'Review Requests' }));
app.get('/instructor/reply',        auth('instructor'), (req,res)=>{
  const request_id = req.query.req || '';
  res.render('instructor/replyForm',{
    user        : req.session.user,
    title       : 'Reply to Review Request',
    request_id,
    course_name : 'software II',
    exam_period : 'spring 2025',
    student_name: 'john doe',
  });
});
app.get('/instructor/statistics',   auth('instructor'), (req,res)=>res.render('instructor/statistics', { user:req.session.user, title:'Statistics' }));

// Institution UI
app.get('/institution',                 auth('institution'), (req,res)=>res.render('institution/dashboard',      { user:req.session.user, title:'Dashboard' }));
app.get('/institution/register',        auth('institution'), (req,res)=>res.render('institution/register',       { user:req.session.user, title:'Register' }));
app.get('/institution/purchase',        auth('institution'), (req,res)=>res.render('institution/purchase',       { user:req.session.user, title:'Purchase' }));
app.get('/institution/user-management', auth('institution'), (req,res)=>res.render('institution/userManagement', { user:req.session.user, title:'Users' }));
app.get('/institution/statistics',      auth('institution'), (req,res)=>res.render('institution/statistics',     { user:req.session.user, title:'Statistics' }));

// ─────────────────────────────────────────────────────────────────────────────
// 10) Server start-up
// ─────────────────────────────────────────────────────────────────────────────
const PORT = process.env.PORT || 3000;
app.listen(PORT, () =>
  console.log(`✔ Front-end listening at http://localhost:${PORT}`)
);


===== front-end/public/api/credits.js =====
// credits.js
import { request } from './_request.js';

/**
 * Purchase credits for a given institution.
 * @param {{ name: string, amount: number }} payload
 */
export const purchaseCredits = ({ name, amount }) =>
  request('/purchase', {
    method: 'PATCH',
    body: { name, amount }
  });

export const getMyCredits = () =>
  request('/mycredits');

export const spendCredits = (amount, reason) =>
  request('/spending', {
    method: 'PATCH',
    body: { amount, reason }
  });

===== front-end/public/api/index.js =====
export * from './credits.js';
export * from './institution.js';
export * from './stats.js';
export * from './personal.js';
export * from './student.js';
export * from './instructor.js';
export * from './users.js';

===== front-end/public/api/institution.js =====
// institution.js
import { request } from './_request.js';

export const registerInstitution = ({ name, domain, email }) =>
  request('/registration', { method: 'POST', body: { name, domain, email } });

export const uploadInitialGrades = file => {
  const fd = new FormData();
  fd.append('xlsx', file);
  return request('/upload_init', { method: 'POST', body: fd });
};

===== front-end/public/api/instructor.js =====
// public/api/instructor.js
import { request } from './_request.js';

/**
 * Fetch pending review requests for the current instructor.
 * orchestrator: PATCH /instructor/review-list
 */
export const getPendingReviews = ({ course_id, exam_period }) =>
  request('/instructor/review-list', {
    method : 'PATCH',
    body   : { course_id, exam_period }
  });

/**
 * Send an instructor’s reply to a specific student request.
 * orchestrator: PATCH /instructor/reply
 */
export const postInstructorReply = ({
  user_id,                // student’s user_id from URL
  course_id,
  exam_period,
  instructor_reply_message,
  instructor_action
}) =>
  request('/instructor/reply', {
    method : 'PATCH',
    body   : {
      user_id,
      course_id,
      exam_period,
      instructor_reply_message,
      instructor_action
    }
  });

===== front-end/public/api/personal.js =====
// front-end/public/api/personal.js
import { request } from './_request.js';

/**
 * Fetch all courses & periods for the logged-in student.
 * (orchestrator: GET /personal/grades → returns { status, data: [...] })
 */
export const getStudentCourses = async () => {
  const { data } = await request('/personal/grades');
  return data;
};

/**
 * Fetch personal grades for a given course and (optionally) exam period.
 * If exam_period is omitted the backend will return the most recent one.
 *
 * @param {{ course_id: string|number, exam_period?: string }} params
 */
export const getPersonalGrades = async ({ course_id, exam_period }) => {
  const qs = new URLSearchParams();
  if (course_id   != null) qs.append('course_id',   course_id);
  if (exam_period != null) qs.append('exam_period', exam_period);

  // empty query-string → “/personal/grades”
  const suffix = qs.toString() ? `?${qs}` : '';
  const { data } = await request(`/personal/grades${suffix}`);
  return data;
};
===== front-end/public/api/_request.js =====
// front-end/public/api/_request.js

// NOTE: in your browser, "orchestrator" isn't a DNS name.
// Use localhost:8080 (or adjust if you run the orchestrator elsewhere).
const API_BASE = 'http://localhost:8080';

/**
 * Read the JWT from localStorage (or cookie fallback).
 */
function getJWT() {
  const fromLS = window.localStorage?.getItem('jwt');
  if (fromLS) return fromLS;
  const m = document.cookie.match(/(?:^|;\s*)jwt=([^;]+)/);
  return m ? decodeURIComponent(m[1]) : null;
}

/**
 * Generic request helper that:
 *  • automatically JSON‐stringifies objects
 *  • sends FormData unchanged
 *  • injects `Authorization: Bearer <token>` if you have a JWT
 */
export async function request(path, { method = 'GET', body, headers } = {}) {
  console.log('→ [API]', method, path, 'body:', body);

  const opts = { method, headers: { ...headers } };
  const token = getJWT();
  if (token && !opts.headers.Authorization) {
    opts.headers.Authorization = `Bearer ${token}`;
  }

  if (body instanceof FormData) {
    opts.body = body;
  } else if (body !== undefined) {
    opts.body = JSON.stringify(body);
    opts.headers = { 'Content-Type': 'application/json', ...opts.headers };
  }

  const res = await fetch(`${API_BASE}${path}`, opts);
  const json = await res.json().catch(() => ({}));

  if (!res.ok) {
    throw new Error(json.message || json.error || res.statusText);
  }
  return json;
}

===== front-end/public/api/stats.js =====
// stats.js
import { request } from './_request.js';

export const persistAndCalculateStats = payload =>
  request('/stats/persist', { method: 'POST', body: payload });

export const getDistributions = filters =>
  request('/stats/distributions', { method: 'POST', body: filters });

===== front-end/public/api/student.js =====
// student.js
import { request } from './_request.js';

/**
 * Submit a new review request.
 * orchestrator: PATCH /student/reviewRequest
 */
export const postReviewRequest = ({ course_id, exam_period, student_message }) =>
  request('/student/reviewRequest', {
    method : 'PATCH',
    body   : { course_id, exam_period, student_message }
  });

/**
 * Check review status.
 * orchestrator: PATCH /student/status
 */
export const getReviewStatus = ({ course_id, exam_period }) =>
  request('/student/status', {
    method : 'PATCH',
    body   : { course_id, exam_period }
  });

===== front-end/public/api/users.js =====
import { request } from './_request.js';

/**
 * Register a new user.
 * @param {{ username: string, password: string, role: string, student_id?: string }} payload
 */
export const registerUser = ({ username, password, role, student_id }) =>
  request('/user/register', {
    method: 'POST',
    body  : { username, password, role, student_id }
  }).then(response => {
    if (response.error) throw new Error(response.error);
    return response;
  });

/**
 * Log in an existing user.
 */
export const loginUser = ({ username, password }) =>
  request('/user/login', {
    method: 'POST',
    body  : { username, password }
  }).then(response => {
    if (!response.role) throw new Error(response.message || 'Login failed');
    if (response.token) localStorage.setItem('jwt', response.token);
    return response;
  });

/**
 * Change password for an existing user.
 * @param {{ username: string, old_password: string, new_password: string }} payload
 */
export const changePassword = ({ username, old_password, new_password }) =>
  request('/user/change-password', {
    method: 'PATCH',
    body  : { username, old_password, new_password }
  });

/**
 * Login via Google token.
 * @param {string} token  Google ID token
 * @param {string} role   User role (optional)
 */
export const googleLoginUser = (token, role = 'institution_representative') =>
  request('/user/google-login', {
    method: 'POST',
    body  : { token, role }
  }).then(response => {
    if (response.token) localStorage.setItem('jwt', response.token);
    return response;
  });

===== front-end/public/js/auth/login.js =====
// front-end/public/js/auth/login.js
import { flash } from '../../script.js';
import { loginUser } from '../../api/users.js';

const form     = document.querySelector('#login-form');
const errorMsg = document.querySelector('#error-msg');

form.addEventListener('submit', async e => {
  e.preventDefault();
  errorMsg.style.display = 'none';

  // ──────────────────────────────────────────────────────────────
  // 1) Build payload (username or e-mail)
  // ──────────────────────────────────────────────────────────────
  const input    = form.username.value.trim();
  const password = form.password.value;
  const isEmail  = /^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(input);
  const payload  = isEmail
    ? { email: input, password }
    : { username: input, password };

  try {
    // ────────────────────────────────────────────────────────────
    // 2) Ask orchestrator to log us in → { role, token }
    // ────────────────────────────────────────────────────────────
    const { role, token } = await loginUser(payload);

    // 3) Persist JWT so every future fetch() carries Authorization: Bearer …
    localStorage.setItem('jwt', token);

    // 4) Tell the Express layer to remember who we are (for EJS templates)
    await fetch('/api/session', {
      method : 'POST',
      headers: { 'Content-Type': 'application/json' },
      body   : JSON.stringify({
        username: input,
        role
      })
    });

    // ────────────────────────────────────────────────────────────
    // 5) Redirect according to role
    // ────────────────────────────────────────────────────────────
    if (['institution_representative', 'representative'].includes(role)) {
      window.location.href = '/institution';
    } else if (role === 'instructor') {
      window.location.href = '/instructor';
    } else if (role === 'student') {
      window.location.href = '/student';
    } else {
      window.location.href = '/';
    }
  } catch (err) {
    errorMsg.textContent = err.message;
    errorMsg.style.display = 'block';
  }
});

===== front-end/public/js/auth/logout.js =====
// front-end/public/js/auth/logout.js
import { flash } from '../../script.js';

const logoutBtn = document.querySelector('#logout-button');
if (logoutBtn) {
  logoutBtn.addEventListener('click', e => {
    e.preventDefault();
    // Remove JWT so future API calls are unauthenticated
    localStorage.removeItem('jwt');
    flash('Logged out');
    window.location.href = '/login';
  });
}

===== front-end/public/js/auth/signup.js =====
// auth/signup.js
import { flash } from '../../script.js';
import { registerUser } from '../../api/users.js';

const form = document.querySelector('main form');

form.addEventListener('submit', async e => {
  e.preventDefault();
  const role     = form.role.value;
  const username = form.username.value.trim();
  const password = form.password.value;

  if (!username || !password) {
    return flash('Username and password are required');
  }
  try {
    await registerUser({ username, password, role });
    flash('Signup successful! Redirecting to login…');
    setTimeout(() => (window.location.href = '/login'), 1500);
  } catch (err) {
    flash(`Error: ${err.message}`);
  }
});

===== front-end/public/js/institution/post-final.js =====
// front-end/public/js/institution/post-final.js
//
// Upload the FINAL grades spreadsheet (credits will be deducted)
// ────────────────────────────────────────────────────────────────
import { flash }    from '../../script.js';
import { request }  from '../../api/_request.js';   // ✅ helper injects JWT

const form = document.querySelector('#upload-final-form');

form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const fileInput = form.querySelector('input[type="file"]');
  if (!fileInput.files.length) {
    return flash('Please select an XLSX file.');
  }

  const fd = new FormData();
  fd.append('file', fileInput.files[0]);            // ↔ name="file" in the form

  try {
    // ────────────────────────────────────────────────────────────
    // •  PATCH /postFinalGrades  (route guarded for instructors)
    // •  request() adds  Authorization: Bearer <jwt>
    // ────────────────────────────────────────────────────────────
    await request('/postFinalGrades', { method: 'PATCH', body: fd });
    flash('Final grades uploaded ✔');
  } catch (err) {
    flash(err.message || 'Upload failed');
  }
});

===== front-end/public/js/institution/post-initial.js =====
// front-end/public/js/institution/post-initial.js
//
// Upload INITIAL grades (first declaration)
// ─────────────────────────────────────────────────────────────
import { flash }   from '../../script.js';
import { request } from '../../api/_request.js';   // ← adds the JWT

const form = document.querySelector('#upload-init-form');

form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const fileInput = form.querySelector('input[type="file"]');
  if (!fileInput.files.length) {
    return flash('Please select an XLSX file.');
  }

  const fd = new FormData();
  fd.append('file', fileInput.files[0]);           // name="file" matches Gin handler

  try {
    // The Orchestrator route is a **POST /upload_init** (instructor-only)
    await request('/upload_init', { method: 'POST', body: fd });
    flash('Initial grades uploaded ✔');
  } catch (err) {
    flash(err.message || 'Upload failed');
  }
});

===== front-end/public/js/institution/purchase.js =====
import { flash } from '../../script.js';
import { purchaseCredits } from '../../api/credits.js';

console.log('🛠️ purchase.js loaded');

const form = document.querySelector('#purchase-form');
if (!form) {
  console.error('⚠️ #purchase-form not found!');
} else {
  form.addEventListener('submit', async e => {
    e.preventDefault();
    console.log('🛠️ submit event fired');

    const instName = form.instName.value.trim();
    const amount = Number(form.amount.value);
    console.log('🛠️ form values:', { instName, amount });

    try {
      const response = await purchaseCredits({ name: instName, amount });
      console.log('🛠️ API response:', response);

      // orchestrator now returns { status, message }
      if (response.message) {
        flash(response.message);
      } else {
        flash('Purchased successfully!');
      }
    } catch (err) {
      console.error('🛠️ purchaseCredits error:', err);
      flash(err.message || 'Purchase failed');
    }
  });
}

===== front-end/public/js/institution/register.js =====
// institution/register.js
import { flash } from '../../script.js';
import { registerInstitution } from '../../api/institution.js';

const form = document.querySelector('#register-inst-form');

form.addEventListener('submit', async e => {
  e.preventDefault();
  const name   = form.name.value.trim();
  const domain = form.domain.value.trim();
  const email  = form.email.value.trim();

  try {
    await registerInstitution({ name, domain, email });
    flash('Institution registered!');
  } catch (err) {
    flash(err.message);
  }
});

===== front-end/public/js/institution/statistics.js =====
// public/js/institution/statistics.js
import { flash } from '../../script.js';
import { getDistributions } from '../../api/stats.js';

const btn = document.querySelector('button.button--secondary');

btn.addEventListener('click', async () => {
  try {
    const stats = await getDistributions({ /* filters */ });
    console.log('Distributions:', stats);
    flash('Distributions fetched—check console.');
  } catch (err) {
    flash(err.message);
  }
});

===== front-end/public/js/institution/user-management.js =====
import { flash } from '../../script.js';
import { registerUser, changePassword } from '../../api/users.js';

const form            = document.querySelector('#user-mgmt-form');
const roleSelect      = document.querySelector('#role');
const studentIdGroup  = document.querySelector('#student-id-group');

// Show/hide Student ID field
roleSelect.addEventListener('change', () => {
  studentIdGroup.style.display =
    roleSelect.value === 'student' ? 'block' : 'none';
});

// Add user handler
form.addEventListener('submit', async e => {
  e.preventDefault();

  const username   = form.username.value.trim();
  const password   = form.password.value;
  const role       = form.role.value;
  const student_id = role === 'student'
    ? form.student_id.value.trim()
    : undefined;

  if (!username || !password) {
    return flash('Username and password are required');
  }

  try {
    await registerUser({ username, password, role, student_id });
    flash('User added!');
    form.reset();
    studentIdGroup.style.display = 'none';
  } catch (err) {
    flash(`Error: ${err.message}`);
  }
});

// Change password handler
const changeForm = document.querySelector('#change-pass-form');
changeForm.addEventListener('submit', async e => {
  e.preventDefault();

  const payload = {
    username     : changeForm.username.value.trim(),
    old_password : changeForm.old_password.value,
    new_password : changeForm.new_password.value
  };

  try {
    await changePassword(payload);
    flash('Password changed ✔');
    changeForm.reset();
  } catch (err) {
    flash(`Error: ${err.message}`);
  }
});

===== front-end/public/js/instructor/reply.js =====
// public/js/instructor/reply.js
import { flash } from '../../script.js';
import { postInstructorReply } from '../../api/instructor.js';

const form = document.querySelector('#instructor-reply-form');

form.addEventListener('submit', async e => {
  e.preventDefault();

  const params       = new URLSearchParams(location.search);
  const user_id      = params.get('req');                // the student’s ID
  const course_id    = 'software II';                    // or pull from hidden input
  const exam_period  = 'spring 2025';                    // likewise
  const instructor_reply_message = form.message.value.trim();
  const instructor_action        = form.decision.value;

  try {
    await postInstructorReply({
      user_id,
      course_id,
      exam_period,
      instructor_reply_message,
      instructor_action
    });
    flash('Reply sent!');
    // Optionally redirect back to the list:
    // window.location.href = '/instructor/review-list';
  } catch (err) {
    flash(err.message);
  }
});

===== front-end/public/js/instructor/review-list.js =====
// public/js/instructor/review-list.js
import { flash } from '../../script.js';
import { getPendingReviews } from '../../api/instructor.js';

window.addEventListener('DOMContentLoaded', async () => {
  try {
    const payload = { course_id: 'software II', exam_period: 'spring 2025' };
    // API now returns the array directly
    const reviews = await getPendingReviews(payload);

    const tbody = document.querySelector('table tbody');
    tbody.innerHTML = reviews
      .map(r => `
        <tr>
          <td>${r.course_name}</td>
          <td>${r.exam_period}</td>
          <td>${r.student}</td>
          <td>
            <a class="button" href="/instructor/reply?req=${r.id}">Reply</a>
          </td>
        </tr>
      `)
      .join('');
  } catch (err) {
    flash(err.message);
  }
});

===== front-end/public/js/student/my-courses.js =====
// front-end/public/js/student/my-courses.js
import { flash } from '../../script.js';
import { getStudentCourses } from '../../api/personal.js';

window.addEventListener('DOMContentLoaded', async () => {
  try {
    const courses = await getStudentCourses();     // API now returns the array directly

    const tbody = document.querySelector('table tbody');
    tbody.innerHTML = courses
      .map(c => `
        <tr ${c.status === 'open' ? 'style="background:#e6e7ea;"' : ''}>
          <td>${c.course_name}</td>
          <td>${c.exam_period}</td>
          <td>${c.status}</td>
          <td>
            <a href="/student/personal?course=${c.id}&period=${encodeURIComponent(c.exam_period)}" class="button">View grades</a>
            <a href="/student/request?course=${c.id}&period=${encodeURIComponent(c.exam_period)}"  class="button${c.status !== 'open' ? ' button--secondary' : ''}">Ask review</a>
            <a href="/student/status?course=${c.id}&period=${encodeURIComponent(c.exam_period)}"   class="button${c.status === 'open' ? ' button--secondary' : ''}">Status</a>
          </td>
        </tr>
      `)
      .join('');
  } catch (err) {
    flash(err.message);
  }
});

===== front-end/public/js/student/personal.js =====
// front-end/public/js/student/personal.js
//
// Show the logged-in student's grades for one course / period
// ─────────────────────────────────────────────────────────────
import { flash } from '../../script.js';
import { getPersonalGrades } from '../../api/personal.js';

window.addEventListener('DOMContentLoaded', async () => {
  const params      = new URLSearchParams(location.search);
  const course_id   = params.get('course');
  const exam_period = params.get('period');       // may be null

  // Visiting /student/personal directly?  Send them back to the course list.
  if (!course_id) {
    flash('Please pick a course first');
    window.location.href = '/student/my-courses';
    return;
  }

  try {
    // Fetch an array of grade entries
    const gradesArray = await getPersonalGrades({ course_id, exam_period });

    const tbody = document.querySelector('table tbody');
    // Map each grade entry to a table row
    tbody.innerHTML = gradesArray.length
      ? gradesArray
          .map(g => {
            // Accept both camelCase and snake_case keys
            const declarationPeriod =
              g.declarationPeriod ?? g.declaration_period ?? '—';
            const classTitle =
              g.classTitle        ?? g.class_title        ?? '—';
            const grading_status =
              g.grading_status    ?? g.gradingStatus      ?? '—';
            const grade =
              g.grade             ?? g.score              ?? '—';

            return `
              <tr>
                <td>${declarationPeriod}</td>
                <td>${classTitle}</td>
                <td>${grading_status}</td>
                <td>${grade}</td>
              </tr>
            `;
          })
          .join('')
      : '<tr><td colspan="4" style="text-align:center;">No grades found.</td></tr>';
  } catch (err) {
    flash(err.message || 'Failed to load grades');
  }
});

===== front-end/public/js/student/review-request.js =====
// front-end/public/js/student/review-request.js
import { flash } from '../../script.js';
import { postReviewRequest } from '../../api/student.js';

const form = document.querySelector('#student-review-request-form');
if (!form) {
  console.error('Student review request form (#student-review-request-form) not found!');
} else {
  form.addEventListener('submit', async e => {
    e.preventDefault();

    const params          = new URLSearchParams(location.search);
    const course_id       = params.get('course');
    const exam_period     = params.get('period') || undefined;   // allow backend to choose
    const student_message = form.message.value.trim();

    if (!course_id) {
      flash('Please pick a course first');
      window.location.href = '/student/my-courses';
      return;
    }

    try {
      await postReviewRequest({ course_id, exam_period, student_message });
      flash('Review request submitted!');
    } catch (err) {
      flash(err.message);
    }
  });
}

===== front-end/public/js/student/review-status.js =====
// front-end/public/js/student/review-status.js
import { flash } from '../../script.js';
import { getReviewStatus } from '../../api/student.js';

window.addEventListener('DOMContentLoaded', async () => {
  const params      = new URLSearchParams(location.search);
  const course_id   = params.get('course');
  const exam_period = params.get('period');   // optional

  if (!course_id) {
    flash('Please pick a course first');
    window.location.href = '/student/my-courses';
    return;
  }

  try {
    const { data } = await getReviewStatus({ course_id, exam_period });
    document.querySelector('textarea[readonly]').textContent =
      data.instructor_message || 'No response yet.';
  } catch (err) {
    flash(err.message);
  }
});

===== front-end/public/js/student/statistics.js =====
// student/statistics.js
import { flash } from '../../script.js';
import { getDistributions } from '../../api/stats.js';

window.addEventListener('DOMContentLoaded', async () => {
  try {
    const { data } = await getDistributions({ /* filters */ });
    console.log('Stats:', data);
    flash('Statistics loaded—see console.');
  } catch (err) {
    flash(err.message);
  }
});

===== front-end/public/script.js =====
// optional flash helper
export function flash(msg) {
  const d = document.createElement("div");
  d.textContent = msg;
  d.style.cssText =
    "position:fixed;top:1rem;right:1rem;background:#006dd0;color:#fff;padding:0.5rem 1rem;border-radius:4px;z-index:1000";
  document.body.appendChild(d);
  setTimeout(() => d.remove(), 3000);
}

===== front-end/public/styles.css =====
/* 0) Make every element use border-box */
*, *::before, *::after {
  box-sizing: border-box;
}

/* 1) Full-width reset */
html, body {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body {
  display: flex;
  flex-direction: column;
  font-family: Arial, sans-serif;
  background: var(--bg);
  color: #333;
  min-height: 100vh;
}

/* 2) CSS variables */
:root {
  --primary:       #006dd0;
  --primary-dark:  #004c97;
  --secondary:     #69727d;
  --bg:            #f5f7fa;
  --card-bg:       #fff;
  --radius:        0.5rem;
  --gap:           1rem;
}

/* 1) Fluid full-width container without overflow */
.container {
  width: 100%;         /* fill the viewport */
  max-width: 100%;     /* never exceed it */
  margin: 0;           /* drop any auto-margins */
  padding: 1rem 2rem;  /* internal gutters */
}

/* Login page wrapper (only on /login) */
.login-container {
  width: 100%;
  max-width: 380px;            /* constrain form width */
  margin: auto;                /* center horizontally & vertically */
  min-height: calc(100vh - 70px); /* push below the sticky navbar */
  display: flex;
  flex-direction: column;
  justify-content: center;     /* vertical centering */
  padding: 1rem;
  box-sizing: border-box;
}



/* 4) Card component */
.card {
  background: var(--card-bg);
  border-radius: var(--radius);
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  padding: 1.5rem;
  transition: transform 0.15s ease, box-shadow 0.15s ease;
}
.card:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

/* 5) Dashboard grid */
.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: var(--gap);
}

/* 6) Button-link for cards */
.button-link {
  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  color: inherit;
  height: 100px;
  font-weight: 600;
}

/* 7) Sticky full-width navbar */
nav.navbar, nav {
  background: var(--primary-dark);
  color: #fff;
  display: flex;
  justify-content: space-between;
  padding: 0.75rem 1rem;
  position: sticky;
  top: 0;
  width: 100%;
  z-index: 100;
}
nav a { 
  color: #fff; 
  text-decoration: none; 
  margin-left: 1rem; 
}

/* 8) Primary buttons (you can keep your old .button if you want, but update colors) */
.button {
  background: var(--primary);
  color: #fff;
  padding: 0.35rem 0.9rem;
  border: none;
  border-radius: 4px;
  text-decoration: none;
  cursor: pointer;
}
.button--secondary { 
  background: var(--secondary); 
}

/* 9) Utilities */
.mt-2 { margin-top: 2rem; }

/* 10) Keep the rest of your existing styles unchanged */
table {
  width: 100%;
  border-collapse: collapse;
  margin: 1rem 0;
}
th, td {
  border: 1px solid #d0d7de;
  padding: 0.45rem;
  text-align: left;
}
th { background: #ebf1f8; }

fieldset {
  border: 1px solid #c2c5c9;
  padding: 1rem;
  margin-bottom: 1rem;
}
legend { font-weight: bold; }

.panel {
  border: 1px solid #c2c5c9;
  margin: 1rem 0;
}
.panel-header {
  background: #e6e7ea;
  padding: 0.45rem 0.6rem;
  font-weight: bold;
}

.form-group {
  margin-bottom: 0.6rem;
}
label {
  display: block;
  margin-bottom: 0.25rem;
}
input, select, textarea {
  width: 100%;
  padding: 0.45rem;
  border: 1px solid #ccd1d6;
  border-radius: 4px;
}

/* If you have additional .navbar__* rules, leave them intact below */
.navbar__brand a { color: #fff; font-weight: 600; text-decoration: none; font-size: 1.2rem }
.navbar__links { display: flex; gap: 1.1rem; list-style: none; margin: 0; padding: 0 }
.navbar__links a { color: #fff; text-decoration: none }
.navbar__links .active { border-bottom: 2px solid #ffeb3b }
.navbar__auth { display: flex; align-items: center; gap: 0.8rem; }

===== front-end/views/institution/dashboard.ejs =====
<!DOCTYPE html><html lang="en"><head>
  <%- include('../partials/head',{title}) %>
</head><body>
  <%- include('../partials/navbar',{user}) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h1>Institution Dashboard</h1>
    <ul>
      <div class="dashboard-grid mt-2">
        <a href="/institution/register"       class="card button-link">1. Register institution</a>
        <a href="/institution/purchase"       class="card button-link">2. Purchase credits</a>
        <a href="/institution/statistics"     class="card button-link">3. View statistics</a>
        <a href="/institution/user-management"    class="card button-link">4. User Management</a>

      </div>

  </main>
</body></html>

===== front-end/views/institution/purchase.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head',{ title }) %>
</head>
<body>
  <%- include('../partials/navbar',{ user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <fieldset class="purchase-panel">
      <legend>Buy credits</legend>
      <form id="purchase-form">
        <div class="purchase-row">
          <div class="form-group">
            <label for="inst-name">Institution:</label>
            <select id="inst-name" name="instName" required>
              <option value="NTUA">NTUA</option>
              <option value="EKPA">EKPA</option>
            </select>
          </div>
          <div class="form-group">
            <label for="amount">Amount:</label>
            <input id="amount" type="number" name="amount" min="1" required/>
          </div>
          <div class="form-group form-group--button">
            <button class="button" type="submit">Buy</button>
          </div>
        </div>
      </form>
    </fieldset>
    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/institution/purchase.js"></script>
</body>
</html>

===== front-end/views/institution/register.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head',{title}) %>
</head>
<body>
  <%- include('../partials/navbar',{user}) %>
  <main class="container">
    <%- include('../partials/header') %>
    <fieldset><legend>Institutions</legend>
      <form id="register-inst-form">
        <div class="form-group"><label>Name</label><input name="name" required/></div>
        <div class="form-group"><label>Domain</label><input name="domain" required/></div>
        <div class="form-group"><label>Contact e-mail</label><input name="email" type="email" required/></div>
        <button class="button" type="submit">Save</button>
      </form>
    </fieldset>
    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/institution/register.js"></script>
</body>
</html>

===== front-end/views/institution/statistics.ejs =====
<!DOCTYPE html><html lang="en"><head>
  <%- include('../partials/head',{title}) %>
</head><body>
  <%- include('../partials/navbar',{user}) %>
  <main class="container">
    <%- include('../partials/header') %>
    <div class="panel">
      <div class="panel-header">Available course statistics
        <button class="button button--secondary" style="float:right;">filter my courses</button>
      </div>
      <table>
        <thead><tr><th>course name</th><th>exam period</th><th>initial submission</th><th>final submission</th></tr></thead>
        <tbody><tr><td>physics</td><td>fall 2024</td><td>2025‑02‑22</td><td>2025‑02‑28</td></tr></tbody>
      </table>
      <div style="display:grid;grid-template-columns:repeat(auto-fill,minmax(150px,1fr));gap:0.6rem;margin-top:1rem;">
        <% for(let i=0;i<6;i++){ %>
          <div style="border:1px solid #d0d7de;height:120px;">chart</div>
        <% } %>
      </div>
    </div>
  </main>
</body></html>

===== front-end/views/institution/userManagement.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head',{ title }) %>
</head>
<body>
  <%- include('../partials/navbar',{ user }) %>
  <main class="container">
    <%- include('../partials/header') %>

    <!-- Add User -->
    <fieldset>
      <legend>Users</legend>
      <form id="user-mgmt-form" novalidate>
        <div class="form-group">
          <label for="username">Username</label>
          <input id="username" name="username" type="text" required />
        </div>

        <div class="form-group">
          <label for="password">Password</label>
          <input id="password" name="password" type="password" required />
        </div>

        <div class="form-group">
          <label for="role">Type</label>
          <select id="role" name="role" required>
            <option value="institution_representative">Institution representative</option>
            <option value="instructor">Instructor</option>
            <option value="student">Student</option>
          </select>
        </div>

        <div class="form-group" id="student-id-group" style="display:none;">
          <label for="student_id">Student&nbsp;ID</label>
          <input id="student_id" name="student_id" type="text" placeholder="e.g. 031200000" />
        </div>

        <div class="form-group form-group--button" style="display:flex;gap:0.5rem;">
          <button class="button" type="submit">Add user</button>
        </div>
      </form>
    </fieldset>

    <!-- Change Password -->
    <fieldset class="mt-2">
      <legend>Change password</legend>
      <form id="change-pass-form" novalidate>
        <div class="form-group">
          <label for="cp-username">Username</label>
          <input id="cp-username" name="username" required />
        </div>

        <div class="form-group">
          <label for="cp-old">Current password</label>
          <input id="cp-old" name="old_password" type="password" required />
        </div>

        <div class="form-group">
          <label for="cp-new">New password</label>
          <input id="cp-new" name="new_password" type="password" required minlength="6" />
        </div>

        <div class="form-group form-group--button">
          <button class="button" type="submit">Change password</button>
        </div>
      </form>
    </fieldset>

    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/institution/user-management.js"></script>
</body>
</html>

===== front-end/views/instructor/dashboard.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'Instructor Dashboard' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h1>Instructor Dashboard</h1>
    <div class="dashboard-grid mt-2">
      <a href="/instructor/post-initial" class="card button-link">1. Post initial grades</a>
      <a href="/instructor/review-list"  class="card button-link">2. Review requests</a>
      <a href="/instructor/reply"        class="card button-link">3. Reply to request</a>
      <a href="/instructor/post-final"   class="card button-link">4. Post final grades</a>
      <a href="/instructor/statistics"   class="card button-link">5. View grade statistics</a>
    </div>

  </main>
</body>
</html>

===== front-end/views/instructor/postFinal.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'Post Final Grades' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h2>Instructor: <%= user.username %></h2>

    <fieldset><legend>FINAL GRADES POSTING</legend>
      <!-- No action/method → handled by JS -->
      <form id="upload-final-form" enctype="multipart/form-data">
        <div class="form-group">
          <label for="xlsx-final">XLSX file with FINAL grades</label>
          <input id="xlsx-final" type="file" name="file"
                 accept=".xlsx" style="width:100%;margin:0.4rem 0;" required />
        </div>
        <button class="button" type="submit">Submit Final Grades</button>
      </form>
    </fieldset>

    <fieldset><legend>XLSX file parsing (preview)</legend>
      <div class="form-group"><label>Course:</label><input readonly value="" /></div>
      <div class="form-group"><label>Period:</label><input readonly value="" /></div>
      <div class="form-group"><label>Number of grades:</label><input readonly value="" style="width:120px"/></div>
      <button class="button">CONFIRM</button>
      <button class="button button--secondary">CANCEL</button>
    </fieldset>

    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/institution/post-final.js"></script>
</body>
</html>

===== front-end/views/instructor/postInitial.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'Post Initial Grades' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h2>Instructor: <%= user.username %></h2>

    <fieldset><legend>INITIAL GRADES POSTING</legend>
      <!-- No action/method → handled by JS -->
      <form id="upload-init-form" enctype="multipart/form-data">
        <div class="form-group">
          <label for="xlsx-init">XLSX file with initial grades</label>
          <input id="xlsx-init" type="file" name="file"
                 accept=".xlsx" style="width:100%;margin:0.4rem 0;" required />
        </div>
        <button class="button" type="submit">Submit Initial Grades</button>
      </form>
    </fieldset>

    <fieldset><legend>XLSX file parsing (preview)</legend>
      <div class="form-group"><label>Course:</label><input readonly value="" /></div>
      <div class="form-group"><label>Period:</label><input readonly value="" /></div>
      <div class="form-group"><label>Number of grades:</label><input readonly value="" style="width:120px"/></div>
      <button class="button">CONFIRM</button>
      <button class="button button--secondary">CANCEL</button>
    </fieldset>

    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/institution/post-initial.js"></script>
</body>
</html>

===== front-end/views/instructor/replyForm.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'Reply to Review Request' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h2>Instructor: <%= user.username %></h2>

    <!-- Review list table above omitted for brevity -->

    <div class="panel">
      <div class="panel-header">
        REPLY TO GRADE REVIEW REQUEST&nbsp;&nbsp;
        <%= course_name %>&nbsp;<%= exam_period %>&nbsp;<%= student_name %>
      </div>

      <!-- JS-driven reply form -->
      <form id="instructor-reply-form">
        <input type="hidden" name="req" value="<%= request_id %>" />

        <div class="form-group">
          <label>Action</label>
          <select name="decision" style="width:180px;">
            <option value="Total accept">Total accept</option>
            <option value="Partial accept">Partial accept</option>
            <option value="Reject">Reject</option>
          </select>
        </div>

        <div class="form-group">
          <label>Instructor's message</label>
          <textarea name="message" style="width:100%;height:80px;"></textarea>
        </div>

        <button class="button button--secondary" type="button">
          Upload attachment
        </button>
        <button class="button" type="submit" style="float:right;">
          Send Reply
        </button>
        <div style="clear:both;"></div>
      </form>
    </div>

    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/instructor/reply.js"></script>
</body>
</html>

===== front-end/views/instructor/reviewList.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'Review Requests' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h2>Instructor: <%= user.username %></h2>

    <table>
      <thead>
        <tr>
          <th>Course Name</th>
          <th>Exam Period</th>
          <th>Student</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <!-- rows will be injected here by JS -->
      </tbody>
    </table>
  </main>

  <script type="module" src="/js/instructor/review-list.js"></script>
</body>
</html>

===== front-end/views/instructor/statistics.ejs =====
<!DOCTYPE html><html lang="en"><head>
  <%- include('../partials/head',{title}) %>
</head><body>
  <%- include('../partials/navbar',{user}) %>
  <main class="container">
    <%- include('../partials/header') %>
    <div class="panel">
      <div class="panel-header">Available course statistics
        <button class="button button--secondary" style="float:right;">filter my courses</button>
      </div>
      <table>
        <thead><tr><th>course name</th><th>exam period</th><th>initial submission</th><th>final submission</th></tr></thead>
        <tbody><tr><td>physics</td><td>fall 2024</td><td>2025‑02‑22</td><td>2025‑02‑28</td></tr></tbody>
      </table>
      <div style="display:grid;grid-template-columns:repeat(auto-fill,minmax(150px,1fr));gap:0.6rem;margin-top:1rem;">
        <% for(let i=0;i<6;i++){ %>
          <div style="border:1px solid #d0d7de;height:120px;">chart</div>
        <% } %>
      </div>
    </div>
  </main>
</body></html>

===== front-end/views/login.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- meta + stylesheet + window.API_BASE -->
  <%- include('partials/head', { title: 'Log in' }) %>
</head>
<body>
  <!-- top navigation bar (guest version) -->
  <%- include('partials/navbar') %>

  <main class="login-container">
    <fieldset>
      <legend>Welcome to clearSKY</legend>

      <!-- CLASSIC form (the JS will intercept submit) -->
      <form id="login-form" action="/login" method="post">
        <div class="form-group">
          <label for="username">User name</label>
          <input id="username" name="username" required />
        </div>

        <div class="form-group">
          <label for="password">Password</label>
          <input id="password" name="password" type="password" required />
        </div>

        <button class="button" type="submit">Login</button>

        <!-- space for client-side errors -->
        <p id="error-msg" style="display:none;color:#c00;margin-top:1rem;"></p>
      </form>

      <!-- space for *server-side* errors from Express -->
      <% if (error) { %>
        <p style="color:#c00;margin-top:1rem;"><%= error %></p>
      <% } %>

      <!-- GOOGLE LOGIN BUTTON -->
      <a id="google-login-btn" class="button button--secondary"
         href="http://localhost:8086/auth/google/login"
         style="margin-top:0.75rem;display:inline-block;">
        Login with&nbsp;Google
      </a>
    </fieldset>
  </main>

  <!-- ──────────────────────────────────────────────────────────────
       Place scripts LAST so the DOM is ready when they run
       ────────────────────────────────────────────────────────────── -->
  <script type="module" src="/js/auth/login.js"></script>
</body>
</html>

===== front-end/views/partials/head.ejs =====
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1.0"/>
<link rel="stylesheet" href="/styles.css"/>
<title><%= title %> | clearSKY</title>
<script>
  window.API_BASE = "<%= API_BASE %>";
</script>

===== front-end/views/partials/header.ejs =====
<div style="background:#e6e7ea;border:1px solid #c2c5c9;margin-bottom:1rem;padding:1rem">
</div>

===== front-end/views/partials/messageBox.ejs =====
<div style="margin-top:1.5rem;border:1px solid #c2c5c9">
  <div style="background:#e6e7ea;padding:0.4rem 0.6rem;font-weight:bold">
    Message area
  </div>
  <div style="height:100px"></div>
</div>

===== front-end/views/partials/navbar.ejs =====
<!-- views/partials/navbar.ejs -->
<nav class="navbar">
  <div class="navbar__brand">
    <a href="/" class="navbar__logo">clearSKY</a>
  </div>

  <% if (!user) { %>
    <!-- Guest nav -->
    <ul class="navbar__links">
      <li>
        <a href="/login"
           class="<%= currentUrl === '/login' ? 'active' : '' %>">
          Log in
        </a>
      </li>
    </ul>

  <% } else { %>
    <!-- Authenticated nav – role-aware -->
    <ul class="navbar__links">
      <% if (user.role === 'student') { %>
        <%- include('./nav-student', { currentUrl }) %>

      <% } else if (user.role === 'instructor') { %>
        <%- include('./nav-instructor', { currentUrl }) %>

      <% } else if (['institution',
                     'institution_representative',
                     'representative'].includes(user.role)) { %>
        <%- include('./nav-institution', { currentUrl }) %>

      <% } else { %>
        <li><a href="/">Home</a></li>
      <% } %>
    </ul>

    <div class="navbar__auth">
      <span class="navbar__user">Hi, <%= user.username %></span>
      <a href="/login" id="logout-button" class="button button--secondary">
        Log out
      </a>
    </div>
  <% } %>
</nav>

===== front-end/views/partials/nav-institution.ejs =====
<li><a class="<%= currentUrl.startsWith('/institution/register') ? 'active' : '' %>"
       href="/institution/register">Register</a></li>
<li><a class="<%= currentUrl.startsWith('/institution/purchase') ? 'active' : '' %>"
       href="/institution/purchase">Purchase</a></li>
<li><a class="<%= currentUrl.startsWith('/institution/user-management') ? 'active' : '' %>"
       href="/institution/user-management">Users</a></li>
<li><a class="<%= currentUrl.startsWith('/institution/statistics') ? 'active' : '' %>"
       href="/institution/statistics">Statistics</a></li>
       
===== front-end/views/partials/nav-instructor.ejs =====
<li><a class="<%= currentUrl.startsWith('/instructor/post-initial') ? 'active' : '' %>"
       href="/instructor/post-initial">Post initial</a></li>
<li><a class="<%= currentUrl.startsWith('/instructor/post-final') ? 'active' : '' %>"
       href="/instructor/post-final">Post final</a></li>
<li><a class="<%= currentUrl.startsWith('/instructor/review-list') ? 'active' : '' %>"
       href="/instructor/review-list">Review list</a></li>
<li><a class="<%= currentUrl.startsWith('/instructor/reply') ? 'active' : '' %>"
       href="/instructor/reply">Reply form</a></li>
<li><a class="<%= currentUrl.startsWith('/instructor/statistics') ? 'active' : '' %>"
       href="/instructor/statistics">Statistics</a></li>

===== front-end/views/partials/nav-student.ejs =====
<li><a class="<%= currentUrl.startsWith('/student/my-courses') ? 'active' : '' %>"
       href="/student/my-courses">My courses</a></li>
<li><a class="<%= currentUrl.startsWith('/student/request') ? 'active' : '' %>"
       href="/student/request">New review</a></li>
<li><a class="<%= currentUrl.startsWith('/student/status') ? 'active' : '' %>"
       href="/student/status">Review status</a></li>
<li><a class="<%= currentUrl.startsWith('/student/statistics') ? 'active' : '' %>"
       href="/student/statistics">Statistics</a></li>
<li><a class="<%= currentUrl.startsWith('/student/personal') ? 'active' : '' %>"
       href="/student/personal">Personal grades</a></li>

===== front-end/views/signup.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('partials/head', { title: 'Sign up' }) %>
</head>
<body>
  <%- include('partials/navbar') %>

  <main class="login-container">
    <fieldset>
      <legend>Create account</legend>

      <form id="signup-form" novalidate>
        <div class="form-group">
          <label>E-mail</label>
          <input name="email" type="email" required />
        </div>

        <div class="form-group">
          <label>Password</label>
          <input name="password" type="password" required />
        </div>

        <div class="form-group">
          <label>Role</label>
          <select name="role">
            <option value="student">Student</option>
            <option value="instructor">Instructor</option>
            <option value="institution_representative">
              Institution representative
            </option>
          </select>
        </div>

        <button class="button" type="submit">Sign up</button>
        <a class="button button--secondary" href="/login">Back to log-in</a>
      </form>
    </fieldset>
  </main>

  <script type="module" src="/js/auth/signup.js"></script>
</body>
</html>

===== front-end/views/student/dashboard.ejs =====
<!DOCTYPE html><html lang="en"><head>
  <%- include('../partials/head',{title}) %>
</head><body>
  <%- include('../partials/navbar',{user}) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h1>Student Dashboard</h1>
    <div class="dashboard-grid mt-2">
      <a href="/student/statistics" class="card button-link">1. View course statistics</a>
      <a href="/student/my-courses" class="card button-link">2. My courses</a>
      <a href="/student/request"    class="card button-link">3. Grade review request</a>
      <a href="/student/status"     class="card button-link">4. Review request status</a>
      <a href="/student/personal"   class="card button-link">5. View personal grades</a>
    </div>

  </main>
</body></html>

===== front-end/views/student/myCourses.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'My Courses' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h2>Student: <%= user.username %></h2>

    <table>
      <thead>
        <tr>
          <th>Course Name</th>
          <th>Exam Period</th>
          <th>Grading Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <!-- Populated by JS -->
      </tbody>
    </table>

    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/student/my-courses.js"></script>
</body>
</html>

===== front-end/views/student/personal.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'View Personal Grades' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h2>Student: <%= user.username %></h2>

    <table>
      <thead>
        <tr>
          <th>Declaration Period</th>
          <th>Course Name</th>
          <th>Grading Status</th>
          <th>Grade</th>
        </tr>
      </thead>
      <tbody>
        <!-- JS (personal.js) will inject one <tr> per grade:
             first <td> = declarationPeriod (Component)
             second <td> = courseName (Course Name)
             third <td> = gradingStatus (Grading Status)
             fourth <td> = grade (Score) -->
      </tbody>
    </table>

    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/student/personal.js"></script>
</body>
</html>

===== front-end/views/student/reviewRequest.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'New Review Request' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h2>Student: <%= user.username %></h2>

    <table>
      <thead>
        <tr>
          <th>Course Name</th>
          <th>Exam Period</th>
          <th>Grading Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <!-- Populated by JS -->
      </tbody>
    </table>

    <div class="panel">
      <div class="panel-header">NEW REVIEW REQUEST</div>
      <form id="student-review-request-form">
        <div class="form-group">
          <label>Message to instructor</label>
          <textarea name="message" style="width:100%;height:120px;"
            placeholder="please review my grade..."></textarea>
        </div>
        <button class="button" type="submit" style="float:right;">Submit</button>
        <div style="clear:both;"></div>
      </form>
    </div>
  </main>

  <script type="module" src="/js/student/review-request.js"></script>
</body>
</html>

===== front-end/views/student/reviewStatus.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head', { title: 'Review Request Status' }) %>
</head>
<body>
  <%- include('../partials/navbar', { user }) %>
  <main class="container">
    <%- include('../partials/header') %>
    <h2>Student: <%= user.username %></h2>

    <table>
      <thead>
        <tr>
          <th>Course Name</th>
          <th>Exam Period</th>
          <th>Grading Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <!-- Populated by JS -->
      </tbody>
    </table>

    <div class="panel">
      <div class="panel-header">REVIEW REQUEST STATUS</div>
      <div class="form-group">
        <label>Message from instructor</label>
        <textarea readonly style="width:100%;height:100px;"></textarea>
      </div>
      <button class="button">Acknowledge</button>
    </div>
  </main>

  <script type="module" src="/js/student/review-status.js"></script>
</body>
</html>

===== front-end/views/student/statistics.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head',{ title: 'Course Statistics' }) %>
</head>
<body>
  <%- include('../partials/navbar',{ user }) %>
  <main class="container">
    <%- include('../partials/header') %>

    <div class="panel">
      <div class="panel-header" style="display:flex;justify-content:space-between;align-items:center;">
        <span>Available course statistics</span>
        <a href="/student/my-courses" class="button button--secondary">My Courses</a>
      </div>
      <table>
        <thead>
          <tr>
            <th>Course Name</th>
            <th>Exam Period</th>
            <th>Initial Submission</th>
            <th>Final Submission</th>
          </tr>
        </thead>
        <tbody>
          <!-- Populated by JS -->
        </tbody>
      </table>
    </div>

    <div id="stats-charts" class="grid-stats">
      <!-- JS will render charts here -->
    </div>

    <%- include('../partials/messageBox') %>
  </main>

  <script type="module" src="/js/student/statistics.js"></script>
</body>
</html>

